------------------------------------------------------------------------------------------
Hibernate
------------------------------------------------------------------------------------------
http://www.journaldev.com/3633/hibernate-interview-questions-and-answers
https://vladmihalcea.com/tutorials/hibernate/

What is Hibernate Framework?
    - Hibernate is java based ORM tool that provides framework for mapping application domain objects 
      to the relational database tables and vice versa
    - Hibernate provides reference implementation of Java Persistence API (JPA)
    - ORM tool provides benefits of loose coupling

What is Java Persistence API (JPA)?
    - JPA provides specification for managing the relational data in application.

What are the benefits of Hibernate?
    - Open source
    - Learning curve is small
    - Supports JPA (that makes our code implementation independent)
    - Eliminates all the boiler-plate code that comes with JDBC and takes care of managing resources
    - Provides HQL (HQL is fully object-oriented and understands concepts like inheritance, polymorphism and association)
    - Allows to execute native sql queries
    - Easy to integrate with other Java EE frameworks
    - Lazy Loading (perform actual database queries only when it’s required)
    - Caching (helps us in getting better performance)

What are the advantages of Hibernate over JDBC?
    - Hibernate removes a lot of boiler-plate code that comes with JDBC API, the code looks more cleaner and readable
    - Hibernate supports inheritance, associations and collections
        These features are not present with JDBC API
    - Hibernate provides transaction management, in fact most of the queries can't be executed outside transaction 
        In JDBC API, we need to write code for transaction management using commit and rollback
    - Hibernate wraps JDBC exceptions and throw JDBCException/HibernateException (un-checked exception), so we don’t need to write try-catch blocks.
        JDBC API throws SQLException that is a checked exception, so we need to write a lot of try-catch block code
    - HQL is more object oriented and close to java programming language
        For JDBC, we need to write native sql queries
    - Hibernate supports caching (that is better for performance)
        JDBC queries are not cached hence performance is low
    - Hibernate configuration helps us in using JDBC like connection as well as JNDI DataSource for connection pool
        This is very important feature in enterprise application and completely missing in JDBC API
    - Hibernate supports JPA annotations (so code is independent of implementation and easily replaceable with other ORM tools)
        JDBC code is very tightly coupled with the application

Name some important interfaces of Hibernate framework?
    1. SessionFactory (org.hibernate.SessionFactory): 
        SessionFactory is immutable and thread-safe (cache of compiled mappings for a single database)
        Initialize SessionFactory once and then we can cache and reuse it
        SessionFactory is responsible to read the hibernate configuration parameters and connect to the database and provide Session objects
        SessionFactory instance is used to get the Session objects for database operations
        
		SessionFactory sessionFatory = new Configuration().configure("hibernate-cfg.xml").buildSessionFactory();
        
    2. Session (org.hibernate.Session): 
        Session is a single-threaded, short-lived object (representing a conversation between the application and the persistent store)
        Session object is the interface between java application code and hibernate framework
        We should open session only when it’s required and close it as soon as we are done using it
        Session obtains physical database connection lazily
        Works as a factory for org.hibernate.Transaction
        Provides methods for CRUD operations
        It wraps JDBC java.sql.Connection
        Session is used as first level cache.
        
		// Session session = sessionFactory.getCurrentSession();
		Session session = sessionFactory.openSession();
		session.beginTransaction();
		session.save(userDetail);
		session.getTransaction().commit();
		session.close();
        
    3. Transaction (org.hibernate.Transaction): 
        Transaction is a single-threaded, short-lived object (used by the application to specify atomic units of work)
        It abstracts the application from the underlying JDBC or JTA transaction
        Session object might span multiple Transaction in some cases

What is hibernate configuration file?
    - A file which contains database specific configurations and used to initialize the SessionFactory

What is hibernate mapping file?
    - A file is used to define the entity bean fields and database table column mappings

Is SessionFactory thread-safe in Hibernate?
    - SessionFactory is both Immutable and thread-safe and it has just one instance in Hibernate application. 

What is difference between getCurrentSession() and openSession() in Hibernate?
    - openSession()         - always create new Session object
      getCurrentSession()   - creates a new Session if not exists, else use same session which is in current hibernate context
    - openSession()         - Explicitly flush and close 
      getCurrentSession()   - No need to flush and close session objects, 
                              it will be automatically taken care by Hibernate internally when transaction ends
    - openSession()         - No need to configure any property to call this method
      getCurrentSession()   - Need to configure additional property "hibernate.current_session_context_class"

What are different types of caches available in Hibernate? 
    - First level cache
        - Maintained at Session level
        - Enabled by default and there is no way to disable it
        - Caches all entities that were used within the current session.
        - Any object cached in a session will not be visible to other sessions
        - When the session is closed, all the cached objects will also be lost
        - Hibernate provides methods through which we can delete selected objects from the cache or clear the cache completely
            Invoke evict() or clear() methods
            
    - Second level cache
        - Maintained at SessionFactory level and shared by all sessions
        - By default, the second-level cache is enabled
            - However, enabling the second level cache is not sufficient because, by default, the NoCachingRegionFactory is used, 
                hence the second-level calls are simply discarded
            - For this reason, you need to configure a proper third-party RegionFactory, like Ehcache/OSCache/SwarmCache/JBossCache/Infinispan:
                <property name="hibernate.cache.region.factory_class" value="org.hibernate.cache.ehcache.EhCacheRegionFactory"/>
    	- Caching of specific entities can be activated by adding the javax.persistence.Cacheable 
    		or the org.hibernate.annotations.Cache annotation to the entity.
        
    - Query level 
        - QueryCache actually stores the result of SQL query for future calls
        - Query cache can be used along with second level cache for improved performance
        - This is only useful for queries that are run frequently with the same parameters
        - Hibernate supports various open source caching solution to implement Query cache e.g. EhCache
            - Configure below property in hibernate configuration file
                <property name="hibernate.cache.use_query_cache">true</property>
             - In code, use setCacheable(true) method of Query
                Query query = session.createQuery("from Employee");
                query.setCacheable(true);
                query.setCacheRegion("ALL_EMP");
        - Does not cache/store entities. It caches query results and contains only entity references and scalar values.

How to configure Hibernate Second Level Cache using EHCache?
    - Add hibernate-ehcache dependency in your maven project, if it’s not maven then add corresponding jars
    - Add below properties in hibernate configuration file
        <property name="hibernate.cache.use_second_level_cache">true</property>
        <property name="hibernate.cache.use_query_cache">true</property>
    - Create EHCache configuration file, a sample file myehcache.xml would look like below
    - Annotate entity beans with @Cache annotation and caching strategy to use
        @Entity
        @Table(name = "ADDRESS")
        @Cache(usage=CacheConcurrencyStrategy.READ_ONLY, region="employee")
        public class Address {
        
        }

What is the requirement for a Java object to become Hibernate entity object?
    - Class should not be final
    - Class must provide a default, no-argument constructor

Why we should not make Entity Class final?
    - Hibernate use proxy classes for lazy loading of data, only when it’s needed
    - This is done by extending the entity bean, if the entity bean will be final then lazy loading will not be possible, hence low performance
    
What will happen if we don’t have no-args constructor in Entity bean?
    - Hibernate uses Reflection API to create instance of Entity beans, usually when you call get() or load() methods
    - The method Class.newInstance() is used for this and it requires no-args constructor
    - So if you don’t have no-args constructor in entity beans, hibernate will fail to instantiate it and you will get HibernateException

What is the difference between the transient, persistent and detached state in Hibernate?
    - Transient
        - New objects created but not associated with any hibernate Session
        - Transient instances may be made persistent by calling save(), persist() or saveOrUpdate()
        - Persistent instances may be made transient by calling delete() or merge()
        
    - Persistent
        - An object which is associated with a Hibernate session
        - Any instance returned by a get() or load() method is persistent
        
    - Detached
        - An object which was earlier associated with Hibernate session but currently it's not
        - Detached instances may be made persistent by calling update(), saveOrUpdate(), lock() or replicate()
        - Transient or detached instance may also be made persistent as a new persistent instance by calling merge()
        
    Note:
    You can call save() or saveOrUpdate() or persist() method to store those object into the database and bring them into the Persistent state. 
    Similarly, you can re-attach a detached object to hibernate sessions by calling either update() or saveOrUpdate() or merge() method.

What is the difference between get() vs load() method in Hibernate?
    - load can return proxy without hitting the database unless required
      get() always go to the database
    - load() will throw an exception if an object with id passed to them is not found
      get() will return null
    - Sometimes using load() can be faster than the get()

What is the difference between save() and persist() method?
    - save() 
        - Saves the data to database immediately
        - Returns the generated id immediately
        - Transaction is not needed to save the data to DB

    - persist()
        - Saves the data to database immediately
        - Returns void (It doesn't return generated id, fetch the ID from the persistent instance)
        - Transaction is needed to save the data to DB, otherwise it will not execute the insert statements

What is the difference between save() and saveOrUpdate() method?
    - save() can only INSERT records
    - saveOrUpdate() can either INSERT or UPDATE records
          Can use saveOrUpdate() without transaction also, but again you will face the issues with mapped objects not getting saved if session is not flushed

When do you use merge() and update() in Hibernate?
    - update() 
        - Use if you are sure that the Hibernate session does not contain an already persistent instance with the same id
        
    - merge() 
        - Use if you want to merge your modifications at any time without considering the state of the session
        - This method creates a copy from the passed entity object and returns it
          The returned object is part of persistent context and tracked for any changes, passed object is not tracked
          This is the major difference with merge() from all other methods

What is the use of merge() call?
    - Used to update existing values
    - This method can be used to move detached/transient objects to persistent state (as a new persistent instance)

What does Session lock() method do in Hibernate?
    - lock() method reattaches the object without synchronizing or updating with the database

What is difference between lock() and update() method?
    - lock() method reattaches the object without synchronizing or updating with the database
    - It is the best practice to use either session.update(..) or session.saveOrUpdate(). 

What is the difference between sorted and ordered collection in Hibernate?
    - Sorted collection sort the data using Java's collection framework sorting methods, in JVM's heap memory
      Ordered collection sorts the data using 'order by' clause in the database itself
    - Sorted collection is more suited for small data set
      Ordered collection is for a large data set, to avoid OutOfMemoryError in Java application

What are the collection types in Hibernate?
    - There are five collection types in hibernate used for one-to-many relationship mappings
        Bag
        Set
        List
        Array
        Map

How to implement Joins in Hibernate?
    - There are various ways to implement joins in hibernate
        Use one-to-one, one-to-many etc mappings
        Use JOIN in the HQL query
        Use native sql query and use join keyword

What is HQL and what are it’s benefits?
    - Is a powerful object-oriented query language
    - It’s very similar to SQL except that we use Objects instead of table names
    - Its case-insensitive except for java class and variable names
        So SeLeCT is the same as sELEct is the same as SELECT, 
        but com.journaldev.model.Employee is not same as com.journaldev.model.EMPLOYEE
    - HQL queries are cached but we should avoid it as much as possible, otherwise we will have to take care of associations
     	Query query = session.createHQLQuery("from UserDetail where id = :userId");
    	query.setParameter("userId", userID);
      	query.uniqueResult();	

Can we execute native sql query in hibernate?
    - Execute native SQL queries through the use of SQLQuery object
	  Query query = session.createSQLQuery("select * from dual");
	  query.list();
	  
What is the benefit of native sql query support in hibernate?
    - We can execute database specific queries that are not supported by Hibernate API (HQL or Criteria APIs)

What is Named SQL Query?
    - Hibernate provides Named Query (that we can define at a central location and use them anywhere in the code)
    - We can create named queries for both HQL and Native SQL
    - Hibernate Named Queries can be defined in Hibernate mapping files 
      or through the use of JPA annotations @NamedQuery and @NamedNativeQuery

What are the benefits of Named SQL Query?
    - Helps us in grouping queries at a central location rather than letting them scattered all over the code
    - Named Query syntax is checked when the hibernate session factory is created,
        thus making the application fail-fast in case of any error in the named queries
    - Named Query is global (means once defined it can be used throughout the application)
    - However one of the major disadvantage is that it’s hard to debug, because we need to find out the location where it’s defined
    	Query namedQuery = session.getNamedQuery("UserDetail.byID");
		namedQuery.setLong(0, Long.parseLong(userID.toString()));
		userDetail = (UserDetail) namedQuery.uniqueResult();

What is Hibernate Criteria API?
    - Criteria API is a object oriented query API to fetch the data from the database
    - It's only used to fetch the results from the database
    - We can't use Criteria to run update or delete queries or any DDL statements
    	Criteria criteria = session.createCriteria(UserDetail.class);
		criteria.add(Restrictions.eq("id", Long.parseLong(userID.toString())));
		UserDetail userDetail = (UserDetail) criteria.uniqueResult();
	- ** CriteriaUpdate and CriteriaDelete operations were added in JPA 2.1
		CriteriaBuilder cb = this.em.getCriteriaBuilder();
		// create update
		CriteriaUpdate<Order> update = cb.createCriteriaUpdate(Order.class);
		// set the root class
		Root e = update.from(Order.class);
		// set update and where clause
		update.set("amount", newAmount);
		update.where(cb.greaterThanOrEqualTo(e.get("amount"), oldAmount));
		// perform update
		this.em.createQuery(update).executeUpdate();
	
What is the benefit of Hibernate Criteria API?
    - Criteria API provides Projection (that we can use for aggregate functions such as sum(), min(), max() etc)
    - Criteria API can be used with ProjectionList (to fetch selected columns only)
    - Criteria API can be used for join queries (by joining multiple tables, useful methods are createAlias(), setFetchMode() and setProjection())
    - Criteria API can be used for fetching results with conditions (useful methods are add() where we can add Restrictions)
    - Criteria API provides addOrder() method that can be used for ordering the results
    
What is Hibernate Proxy and how it helps in lazy loading?
    - Hibernate uses proxy object to support lazy loading
    - Basically when you load data from tables, hibernate doesn’t load all the mapped objects
    - As soon as you reference a child or lookup object via getter methods,
        if the linked entity is not in the session cache, 
        then the proxy code will go to the database and load the linked object
    - It uses javassist to effectively and dynamically generate sub-classed implementations of your entity objects

How transaction management works in Hibernate?
    - After getting the session from SessionFactory, call session.beginTransaction() to start the transaction
    - This method returns the Transaction reference, that we can use later on to either commit or rollback the transaction
    - Overall hibernate transaction management is better than JDBC transaction management because we don’t need to catch the exceptions for rollback
    - Any exception thrown by session methods automatically rollback the transaction

What is Cascade in hibernate and what are different types of cascades?
    1. None: No Cascading, it’s not a type but when we don’t define any cascading then no operations in parent affects the child
    2. ALL: Cascades save, delete, update, evict, lock, replicate, merge, persist (Basically everything)
    3. SAVE_UPDATE: Cascades save and update, available only in hibernate
    4. DELETE: Corresponds to the Hibernate native DELETE action, only in hibernate
    5. DETATCH, MERGE, PERSIST, REFRESH and REMOVE – for similar operations
    6. LOCK: Corresponds to the Hibernate native LOCK action
    7. REPLICATE: Corresponds to the Hibernate native REPLICATE action

How to integrate log4j logging in hibernate application?
    - Hibernate 4 uses JBoss logging rather than slf4j used in earlier versions
    - For log4j configuration, we need to follow below steps
            Add log4j dependencies for maven project, if not maven then add corresponding jar files
            Create log4j.xml configuration file or log4j.properties file and keep it in the classpath.
            For standalone projects, use static block to configure log4j using DOMConfigurator or PropertyConfigurator
            For web applications, you can use ServletContextListener to configure it

How to use application server JNDI DataSource with Hibernate framework?
    - For web applications, it’s always best to allow servlet container to manage the connection pool
    - That’s why we define JNDI resource for DataSource and we can use it in the web application
    - It’s very easy to use in Hibernate, all we need is to remove all the database specific properties 
        and use below property to provide the JNDI DataSource name
    <property name="hibernate.connection.datasource">java:comp/env/jdbc/MyLocalDB</property>

How to integrate Hibernate and Spring frameworks?
    1. Add hibernate-entitymanager, hibernate-core and spring-orm dependencies
    2. Create Model classes and corresponding DAO implementations for database operations
        Note that DAO classes will use SessionFactory that will be injected by Spring Bean configuration
    3. If you are using Hibernate 3, you need to configure org.springframework.orm.hibernate3.LocalSessionFactoryBean 
        or org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean in Spring Bean configuration file
    4. For Hibernate 4, there is single class org.springframework.orm.hibernate4.LocalSessionFactoryBean that should be configured.
    5. Note that we don't need to use Hibernate Transaction Management,
        we can leave it to Spring declarative transaction management using @Transactional annotation

What is HibernateTemplate class?
    - When Spring and Hibernate integration started, Spring ORM provided two helper classes – HibernateDaoSupport and HibernateTemplate
    - The reason to use them was to get the Session from Hibernate and get the benefit of Spring transaction management
    - However from Hibernate 3.0.1, we can use SessionFactory getCurrentSession() method to get the current session 
        and use it to get the spring transaction management benefits
    - Other benefit of HibernateTemplate was exception translation but 
        that can be achieved easily by using @Repository annotation with service classes

What are the types of Sequence Generator?
	- AUTO
	- IDENTITY
	- SEQUENCE
	- TABLE
	|-------------------------------------------------------------------------------------------------------|
	|@Entity																								|
	|@Where(clause = "retired = 'N'")																		|
	|@Table(name = "TEST_USER_DETAIL")																		|
	|@SequenceGenerator(name = "TEST_USER_DET_SEQ", sequenceName = "TEST_USER_DET_SEQ", allocationSize = 1)	|
	|public class UserDetail extends BaseDomain {															|
	|																										|
	|	private Integer id;																					|
	|																										|
	|	@Id																									|
	|	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "TEST_USER_DET_SEQ")					|
	|	@Column(name = "USER_ID")																			|
	|	public Integer getId() {																			|
	|		return id;																						|
	|	}																									|
	|																										|
	|	public void setId(final Integer id) {																|
	|		this.id = id;																					|
	|	}																									|
	|}																										|
	|-------------------------------------------------------------------------------------------------------|
	
How Hibernate transaction works (high-level)?
    - Transaction is associated with a Session.
        private static SessionFactory SESSION_FACTORY = new Configuration().configure("hibernate-cfg.xml").buildSessionFactory();
        final Session session = SESSION_FACTORY.openSession();
        session.beginTransaction();
        session.save(userDetail);
        session.getTransaction().commit();
        session.close();

What are best practices to follow with Hibernate framework?
    - Prefer lazy fetching for associations
    - Use native sql query only when it can’t be done using HQL, such as using database specific feature
    - If you have to sort the collection, use ordered list rather than sorting it using Collection API
    - Use named queries wisely, keep it at a single place for easy debugging. Use them for commonly used queries only.
        For entity specific query, you can keep them in the entity bean itself
    - For web applications, always try to use JNDI DataSource rather than configuring to create connection in hibernate
    - Avoid Many-to-Many relationships, it can be easily implemented using bidirectional One-to-Many and Many-to-One relationships
    - For collections, try to use Lists, maps and sets. Avoid array because you don’t get benefit of lazy loading

What is Hibernate Validator Framework?
	- https://www.journaldev.com/3626/hibernate-validator-jsr303-example-tutorial
        //Getting Validator instance with Annotations
        ValidatorFactory validatorFactory = Validation.buildDefaultValidatorFactory();
        Validator validator = validatorFactory.getValidator();
        Employee emp = new Employee(-1, "Name","email","123");
          Set<ConstraintViolation<Employee>> validationErrors = validator.validate(emp);
          if(!validationErrors.isEmpty()){
            for(ConstraintViolation<Employee> error : validationErrors){
                System.out.println(error.getMessageTemplate() + " : " + error.getPropertyPath() + " : " + error.getMessage());
            }
        }
	- Hibernate Validator Custom Error Messages
		- We can define our custom error messages too, all we need is to have ValidationMessages.properties file in the classpath.

Which design patterns are used in Hibernate framework?
    1. Proxy Pattern (for lazy loading)
    2. Factory pattern (in SessionFactory)
    3. Domain Model Pattern (An object model of the domain that incorporates both behavior and data)
    4. Data Mapper (A layer of Mappers that moves data between objects and a database while keeping them independent of each other and the mapper itself)

What is N+1 SELECT problem in Hibernate?
    - The N+1 SELECT problem is a result of lazy loading and load on demand fetching strategy. 
    - In this case, Hibernate ends up executing N+1 SQL queries to populate a collection of N elements. 
    - For example, if you have a List of N Items where each Item has a dependency on a collection of Bid object. 
    - Now if you want to find the highest bid for each item then Hibernate will fire 1 query to load all items 
      and N subsequent queries to load Bid for each item. 
    - So in order to find the highest bid for each item your application end up firing N+1 queries.

What are some strategies to solve the N+1 SELECT problem in Hibernate?
    1. Pre-fetching in batches, this will reduce N+1 problem to N/K + 1 problem where K is size of batch
    2. Subselect fetching strategy
    3. Disabling lazy loading
    4. Using JOIN FETCH in the FROM clause
    5. Use of @NamedEntityGraph

Sample Issue:
List<Author> authors = em.createQuery("SELECT a FROM Author a", Author.class).getResultList();
for (Author a : authors) {
    log.info(a.getFirstName() + " " + a.getLastName() + " wrote "
            + a.getBooks().size() + " books.");
}

Solution 1: (https://thorben-janssen.com/common-hibernate-mistakes-cripple-performance/)
-----------------------------------------
Author a = em.createQuery(
                "SELECT a FROM Author a JOIN FETCH a.books WHERE a.id = 1",
                Author.class).getSingleResult();


Solution 2: Using @NamedEntityGraph (https://www.baeldung.com/spring-data-jpa-named-entity-graphs)
-----------------------------------------
@Entity
@NamedEntityGraph(name = "Item.characteristics", attributeNodes = @NamedAttributeNode("characteristics"))
public class Item {
	@Id
    private Long id;
    private String name;
    
    @OneToMany(mappedBy = "item")
    private List<Characteristic> characteristics = new ArrayList<>();
    
    //Getters and Setters
}

@Entity
public class Characteristic {

    @Id
    private Long id;
    private String type;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn
    private Item item;

    //Getters and Setters
}

- Attach the @EntityGraph annotation to one of our repository method

public interface ItemRepository extends JpaRepository<Item, Long> {

    @EntityGraph(value = "Item.characteristics")
    Item findByName(String name);
    
}


- SQL generated by Hibernate with @EntityGraph
select 
    item0_.id as id1_10_0_,
    characteri1_.id as id1_4_1_,
    item0_.name as name2_10_0_,
    characteri1_.item_id as item_id3_4_1_,
    characteri1_.type as type2_4_1_,
    characteri1_.item_id as item_id3_4_0__,
    characteri1_.id as id1_4_0__
from 
    item item0_ 
left outer join 
    characteristic characteri1_ 
on 
    item0_.id=characteri1_.item_id 
where 
    item0_.name=?


- SQL generated by Hibernate without @EntityGraph
For comparison, let's remove the @EntityGraph annotation from the repository and inspect the query:

select 
    item0_.id as id1_10_,
    item0_.name as name2_10_ 
from 
    item item0_ 
where 
    item0_.name=?

-----------------------------------------
What is optimistic locking and pessimistic locking in hibernate?
	- In pessimistic locking, the object is locked when it is initially accessed for the first time in a given transaction.
	- In optimistic locking, the object is not locked when it is accessed for the first time in the transaction. 
		Instead, its state (generally the version number) is saved.

What is the difference between pessimistic locking and optimistic locking?
	- Optimistic locking is when you check if the record was updated by someone else before you commit the transaction. 
	- Pessimistic locking is when you take an exclusive lock so that no one else can start modifying the record. 
	- You cannot combine optimistic locking with the automatic retry.

Optimistic Locking
	- In order to use optimistic locking, we need to have an entity including a property with @Version annotation. 
	- While using it, each transaction that reads data holds the value of the version property.
	- Before the transaction wants to make an update, it checks the version property again.
	- If the value has changed in the meantime an OptimisticLockException is thrown. 
	- Otherwise, the transaction commits the update and increments a value version property.
	- We can retrieve a value of the version attribute via entity, but we mustn't update or increment it.
	- Version attributes are properties with @Version annotation. They are necessary for enabling optimistic locking.
		@Entity
		public class Student {
		    @Id
		    private Long id;
	
		    private String name;
	
		    @Version
		    private Integer version;
		
		    // getters and setters
		}

Optimistic Lock Modes?
	JPA provides us with two different optimistic lock modes (and two aliases):
		- OPTIMISTIC 
			– it obtains an optimistic read lock for all entities containing a version attribute
			- Whenever we request the OPTIMISTIC lock mode, a persistence provider will prevent our data from dirty reads as well as non-repeatable reads.
    	- OPTIMISTIC_FORCE_INCREMENT – it obtains an optimistic lock the same as OPTIMISTIC and additionally increments the version attribute value
    	- READ – it's a synonym for OPTIMISTIC
    	- WRITE – it's a synonym for OPTIMISTIC_FORCE_INCREMENT

Optimistic Lock Usage?
	- Find
		entityManager.find(Student.class, studentId, LockModeType.OPTIMISTIC);
	- Query
		Query query = entityManager.createQuery("from Student where id = :id");
		query.setParameter("id", studentId);
		query.setLockMode(LockModeType.OPTIMISTIC_INCREMENT);
		query.getResultList()
	- Explicit Locking
		Student student = entityManager.find(Student.class, id);
		entityManager.lock(student, LockModeType.OPTIMISTIC);
	- Refresh
		Student student = entityManager.find(Student.class, id);
		entityManager.refresh(student, LockModeType.READ);
	- NamedQuery
		@NamedQuery(name="optimisticLock",
		query="SELECT s FROM Student s WHERE s.id LIKE :id", lockMode = WRITE)
		
		
Pessimistic Lock Modes?
	- JPA specification defines three pessimistic lock modes which we're going to discuss:
		- PESSIMISTIC_READ – allows us to obtain a shared lock and prevent the data from being updated or deleted
    	- PESSIMISTIC_WRITE – allows us to obtain an exclusive lock and prevent the data from being read, updated or deleted
    	- PESSIMISTIC_FORCE_INCREMENT – works like PESSIMISTIC_WRITE and it additionally increments a version attribute of a versioned entity

Pessimistic Lock Usage?
		- Find
			entityManager.find(Student.class, studentId, LockModeType.PESSIMISTIC_READ);
		- Query
			Query query = entityManager.createQuery("from Student where studentId = :studentId");
			query.setParameter("studentId", studentId);
			query.setLockMode(LockModeType.PESSIMISTIC_WRITE);
			query.getResultList()
		- Explicit Locking
			It's also possible to lock manually the results retrieved by the find method:
				Student resultStudent = entityManager.find(Student.class, studentId);
				entityManager.lock(resultStudent, LockModeType.PESSIMISTIC_WRITE);
		- Refresh
			If we want to overwrite the state of the entity by the refresh method, we can also set a lock:
				Student resultStudent = entityManager.find(Student.class, studentId);
				entityManager.refresh(resultStudent, LockModeType.PESSIMISTIC_FORCE_INCREMENT);
		- NamedQuery
			@NamedQuery annotation allows us to set a lock mode as well:
				@NamedQuery(name="lockStudent",
				  query="SELECT s FROM Student s WHERE s.id LIKE :studentId",
				  lockMode = PESSIMISTIC_READ)

Pessimistic Lock Scope
	- NORMAL
		- PessimisticLockScope.NORMAL is the default scope
		- Locks the entity itself. When used with joined inheritance it also locks the ancestors.
	- EXTENDED
		- EXTENDED scope covers the same functionality as NORMAL. In addition, it's able to block related entities in a join table
			Map<String, Object> properties = new HashMap<>();
			map.put("javax.persistence.lock.scope", PessimisticLockScope.EXTENDED);
			entityManager.find(
			  Student.class, 1L, LockModeType.PESSIMISTIC_WRITE, properties);
  
What is Dirty Checking in Hibernate?
	- Hibernate incorporates Dirty Checking feature that permits developers and users to avoid time-consuming write actions. 
	- This Dirty Checking feature changes or updates fields that need to be changed or updated,
		while keeping the remaining fields untouched and unchanged.

What is meant by Hibernate tuning?
	- Optimizing the performance of Hibernate applications is known as Hibernate tuning.
	- The performance tuning strategies for Hibernate are:
		- SQL Optimization
		- Session Management
		- Data Caching

What are the best practices that Hibernate recommends for persistent classes?
	- All Java classes that will be persisted need a default constructor.
   	- All classes should contain an ID in order to allow easy identification of your objects within Hibernate and the database. 
   		This property maps to the primary key column of a database table.
   	- All attributes that will be persisted should be declared private and have getXXX and setXXX methods defined in the JavaBean style.
   	- A central feature of Hibernate, proxies, depends upon the persistent class being either non-final, or the implementation of an interface that declares all public methods.
   	- All classes that do not extend or implement some specialized classes and interfaces required by the EJB framework.
------------------------------------------------------------------------------------------
Common Mistakes using Hibernate
------------------------------------------------------------------------------------------
1. Using Eager Fetching
	- Use fetch type lazy
	
2. Ignoring the Default FetchType of Many-To-One Associations
	- Explicitly set fetch type to lazy

	@Entity
	public class Review {
	 
	    @ManyToOne(fetch = FetchType.LAZY)
	    @JoinColumn(name = "fk_book")
	    private Book book;
	     
	    ... 
	}

3. Not Initializing Required Associations
	- When you use FetchType.LAZY for all of your associations to avoid mistake 1 and 2, you will find several n+1 select issues in your code.
	- You can easily avoid that, when you tell Hibernate to initialize the required association. 
	- There are several different ways to do that. 
	- The easiest one is to add a JOIN FETCH statement to your FROM clause.
	Author a = em.createQuery(
                "SELECT a FROM Author a JOIN FETCH a.books WHERE a.id = 1",
                Author.class).getSingleResult();
                
4. Selecting More Records Than You Need

5. Not using Bind Parameters

6. Performing all Logic in Your Business Code

7. Calling the flush Method Without a Reason

8. Using Hibernate for Everything
	- All of the below situations are not a good fit for JPA’s and Hibernate’s query capabilities.
		- Writing very complex queries or
		- Implementing analysis or reporting use cases or 
		- Performing write operations on a huge number of records
	- Take a look at other frameworks, like jOOQ or Querydsl, which are closer to SQL and avoid any object relational mappings

------------------------------------------------------------------------------------------
Hibernate Tips 
------------------------------------------------------------------------------------------
https://thorben-janssen.com/wp-content/uploads/member-access/Preview-Hibernate-Tips-More-than-70-solutions-to-common-Hibernate-problems.pdf

------------------------------------------------------------------------------------------
Hibernate Performance Tuning
------------------------------------------------------------------------------------------
https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=&cad=rja&uact=8&ved=2ahUKEwjotLnv7JTvAhWDwTgGHXAdAcoQFjABegQIBBAD&url=https%3A%2F%2Fthorben-janssen.com%2Ftips-to-boost-your-hibernate-performance%2F&usg=AOvVaw3heI4myKCqTDD_tezkt84w