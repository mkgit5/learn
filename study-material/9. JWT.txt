-----------------------------------------------------------------------------------------------------------------------------
JWT (JSON Web Tokens)
-----------------------------------------------------------------------------------------------------------------------------
https://jwt.io/introduction/

- JWT tokens are used in stateless authentication mechanism where user information is not saved in the memory.

										-------------------------------------
										|	<HEADER>.<PAYLOAD>.<SIGNATURE>	|
										-------------------------------------
														|
						---------------------------------------------------------------------
						|								|									|
						|								|									|
		|	1. Type of the token (which is JWT)	|	Claims			|	1. Used to verify the sender					|
		|	2. Hashing algorithm to be used		|	1. Reserved		|	2. And to check that message is not tampered	|
		|										|	2. Public		|													|
		|										|	3. Private		|													|

What is JSON Web Token?
	- JSON Web Token (JWT) is an open standard that defines a compact and self-contained way 
	  for securely transmitting information between parties as a JSON object
	- This information can be verified and trusted because it is digitally signed
	- JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA

# Compact
	- Because of their smaller size, JWTs can be sent through a URL, POST parameter, or inside an HTTP header
	- Additionally, the smaller size means transmission is fast

# Self-contained
	- The payload contains all the required information about the user, avoiding the need to query the database more than once.

When should you use JSON Web Tokens?
	1. Authentication
		- This is the most common scenario for using JWT
		- Once the user is logged in, each subsequent request will include the JWT
		- Single Sign On is a feature that widely uses JWT nowadays
		  because of its small overhead and its ability to be easily used across different domains
	2. Information Exchange
		- JSON Web Tokens are a good way of securely transmitting information between parties
		- Because JWTs can be signed—for example, using public/private key pairs—you can be sure the senders are who they say they are
		- Additionally, as the signature is calculated using the header and the payload, 
			you can also verify that the content hasn't been tampered with

What is the JSON Web Token structure?
	- JWT consist of three parts separated by dots (.)
		1. Header
			- The header typically consists of two parts
				1. Type of the token (which is JWT)
				2. Hashing algorithm being used (such as HMAC SHA256 or RSA)
				Note: Then, this JSON is Base64Url encoded to form the first part of the JWT.

		2. Payload
			- Contains the claims
			- Claims are statements about an entity (typically, the user) and additional metadata
			- Three types of claims
				1. reserved
				2. public
				3. private
				
				Reserved claims:
					- These are a set of predefined claims which are not mandatory but recommended, to provide a set of useful, interoperable claims
					- Some of them are: 
						1. iss (issuer)
						2. exp (expiration time)
						3. sub (subject)
						4. aud (audience)
						5. others
				
				Public claims: 
					- These can be defined at will by those using JWTs. 
					- But to avoid collisions they should be defined in the IANA JSON Web Token Registry 
						or be defined as a URI that contains a collision resistant namespace
	
				Private claims: 
					- These are the custom claims created to share information between parties that agree on using them
				
			- EG: An example of payload could be:
				{
				  "sub": "1234567890",
				  "name": "John Doe",
				  "admin": true
				}
	
			Note: The payload is then Base64Url encoded to form the second part of the JSON Web Token.
			
		3. Signature
			- Signature is used to verify the sender of the JWT and to ensure that the message wasn't changed along the way
			- To create the signature part you have to take the encoded header, the encoded payload, a secret, 
				the algorithm specified in the header and sign that
			- For example if you want to use the HMAC SHA256 algorithm, the signature will be created in the following way:
				String signature = HMACSHA256(base64UrlEncode(header) + "." + base64UrlEncode(payload), secret)
		
	- Putting all together
		- The output is three Base64 strings separated by dots
		- It can be easily passed in HTML and HTTP environments

How JSON Web Tokens work?
	- This is a stateless authentication mechanism as the user state is never saved in server memory
	- The server will check for valid JWT in the Authorization header  (Authorization: Bearer <token>)
		and if it's present, the user will be allowed to access protected resources
	- As JWTs are self-contained, all the necessary information is there, reducing the need to query the database multiple times

Why should we use JSON Web Tokens? 
Benefits of JSON Web Tokens (JWT)?
JWT vs SWT vs SAML ?
	- JSON is less verbose than XML
	- When JWT is encoded its size is also smaller, making JWT more compact than SAML
	- Security-wise
		- SWT can only be symmetrically signed by a shared secret using the HMAC algorithm
		  JWT and SAML tokens can use a public/private key pair for signing
		- Signing XML with XML Digital Signature without introducing obscure security holes is very difficult 
		  Signing of JSON is very simple
	- Cross-Origin Resource Sharing (CORS) won't be an issue as it doesn't use cookies

