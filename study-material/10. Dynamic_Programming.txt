-----------------------------------------------------------------------------------------------------------------------------
Dynamic Programming
-----------------------------------------------------------------------------------------------------------------------------
https://www.javacodegeeks.com/2014/02/dynamic-programming-introduction.html
Some hints that I use when trying to decide whether or not to use dynamic programming for a given problem:
	- Can the problem be divided into subproblems of the same kind?
	- Can I define the previous division by a recurrence definition? That is, define F(n) as a function of F(n-1)
	- Will I need the results to the sub-problems multiple times or just once?
	- Does it make more sense to use a top-down or a bottom-up approach?
	- Do I need to worry about the stack if I use a memoized recursive approach?
	- Do I need to keep all previous results or can I optimize the space and keep just some of them?
-----------------------------------------------------------------------------------------------------------------------------
# Read properties file
-----------------------------------------------------------------------------------------------------------------------------
https://www.mkyong.com/java/java-properties-file-examples/
http://crunchify.com/java-properties-file-how-to-read-config-properties-values-in-java/

package com.manju.properties;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class App {

  public static void main(String[] args) {

	Properties prop = new Properties();
	InputStream input = null;

	try {

		input = new FileInputStream("config.properties");
		
		// Read file from classpath
		// input = App.class.getClassLoader().getResourceAsStream(filename);
		// if(input == null) {
		//	System.out.println("Sorry, unable to find " + filename);
		//	return;
    	// }

		// load a properties file
		prop.load(input);

		// get the property value and print it out
		System.out.println(prop.getProperty("database"));
		System.out.println(prop.getProperty("dbuser"));
		System.out.println(prop.getProperty("dbpassword"));

	} catch (IOException ex) {
		ex.printStackTrace();
	} finally {
		if (input != null) {
			try {
				input.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

  }
}


-----------------------------------------------------------------------------------------------------------------------------
# Write to properties file
-----------------------------------------------------------------------------------------------------------------------------

package com.manju.properties;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Properties;

public class App {
  public static void main(String[] args) {

	Properties prop = new Properties();
	OutputStream output = null;

	try {

		output = new FileOutputStream("config.properties");

		// set the properties value
		prop.setProperty("database", "localhost");
		prop.setProperty("dbuser", "mkyong");
		prop.setProperty("dbpassword", "password");

		// save properties to project root folder
		prop.store(output, null);

	} catch (IOException io) {
		io.printStackTrace();
	} finally {
		if (output != null) {
			try {
				output.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}
  }
}

-----------------------------------------------------------------------------------------------------------------------------
Determine whether a list of parentheses "[()]{}...etc" are  balanced or unbalanced
-----------------------------------------------------------------------------------------------------------------------------
A stack helps with the problem. 
While traversing the input, put all of the open parenthesis into the stack, 
pops an open parenthesis when a matching close parenthesis shows up.
Otherwise if they fail to match, return invalid as the result.

public boolean isValid(String s) {
      Stack stack = new Stack();
      for(char c: s.toCharArray()) {
           if(c == '{' || c == '(' || c == '[') {
                stack.push(c);
           } else if(stack.isEmpty() || stack.pop() != getMatchingParenthesis(c)) {
                return false;
           }
      }
       return stack.isEmpty() ? true: false;
}

private char getMatchingParenthesis(char c) {
       if(c == '}') return '{';
       if(c == ']') return '[';
       return '(';
}


EBay interview Questions

Interview Questions
1st round:
1. How to uniquely identify the repeating strings from the array.
2. How to search in Skiplist

2nd round:
1. BinarySearch
2. How to write Customized Comparator
3. Anagrams

3rd round:
Lunch with tech manager and find maximum sub array

4th round:
1. Binary Search in sorted matrix
2. Different ways of writing Singleton pattern
3. Resume go through

5th round:
1. How HashMap works
2. Get sum using minimum combination of numbers provided

6th round:
1. Singleton
2. Tree traversal
3. How to mirror the tree
4. Stack implementation
5. Queue using stack
6. Reverse the sentence  