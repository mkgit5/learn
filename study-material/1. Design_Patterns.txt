-----------------------------------------------------------------------------------------------------------------------------
Design Pattern Links:
https://www.journaldev.com/1827/java-design-patterns-example-tutorial
-----------------------------------------------------------------------------------------------------------------------------

Design Pattern
-----------------------------------------------------------------------------------------------------------------------------
Design patterns are solutions to general problems that software developers faced during software development.

What is Gang of Four (GOF)? (ERRJ)
    - In 1994, four authors Erich Gamma, Richard Helm, Ralph Johnson and John Vlissides 
      published a book titled Design Patterns - Elements of Reusable Object-Oriented Software which 
      initiated the concept of Design Pattern in Software development. 
    - These authors are collectively known as Gang of Four (GOF).

What are the different types of Design Patterns?
    1. Creational Patterns ('way to create objects')
        - These design patterns provide a 'way to create objects' while hiding the creation logic, 
          rather than instantiating objects directly using new operator
          This gives program more flexibility in deciding which objects need to be created for a given use case
        - Singleton Pattern
          Factory Pattern
          Abstract Factory Pattern
          Builder Pattern
          Prototype Pattern
        
    2. Structural Patterns ('ways to compose objects')
        - These design patterns concern class and object composition
        - Concept of inheritance is used to compose interfaces and define 'ways to compose objects' to obtain new functionalities
        - Adapter Pattern
          Composite Pattern
          Proxy Pattern
          Flyweight Pattern
          Facade Pattern
          Bridge Pattern
          Decorator Pattern
        
    3. Behavioral Patterns ('communication between objects')
        - These design patterns are specifically concerned with 'communication between objects'.
        - Iterator Pattern
          Template Method Pattern
          Mediator Pattern
          Chain of Responsibility Pattern
          Observer Pattern
          Strategy Pattern
          Command Pattern
          State Pattern
          Visitor Pattern
          Interpreter Pattern
          Memento Pattern

(http://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-examples)

-----------------------------------------------------------------------------------------------------------------------------
Singleton pattern
-----------------------------------------------------------------------------------------------------------------------------
What is Singleton pattern in Java? 
    - Singleton pattern is a pattern which allows only one instance of the class available in whole application
    - Singleton pattern is used for logging, caching and thread pool
    - java.lang.Runtime is a good example of Singleton pattern in Java

Concepts of Singleton:
    1. Private constructor to restrict instantiation of the class from other classes.
    2. Private static variable of the same class that is the only instance of the class.
    3. Public static method that returns the instance of the class, 
       this is the global access point for outer world to get the instance of the singleton class.

Ways of Singleton implementation:
    1. Eager initialization
    2. Static block initialization (Inner static class) - Most widely used implementation of Singleton
    3. Lazy Initialization
    4. Thread Safe Singleton (Synchronized - method level)
    5. Bill Pugh Singleton (Synchronized - inside the method)
    6. Using Reflection to destroy Singleton Pattern
    7. Enum Singleton
    8. Serialization and Singleton

Can you write thread-safe Singleton in Java?
	- There are multiple ways to write thread-safe singleton in Java:
		1. By writing singleton using 'double checked locking'
			/**
			* Singleton pattern example with Double checked Locking
			*/
			public class DoubleCheckedLockingSingleton {
				 // If variable is not shared between multiple threads, you don't need to use volatile keyword with that variable.
			     private static volatile DoubleCheckedLockingSingleton INSTANCE;
			 
			     private DoubleCheckedLockingSingleton() {}
			 
			     public static DoubleCheckedLockingSingleton getInstance() {
			         if(INSTANCE == null) {
			            synchronized(DoubleCheckedLockingSingleton.class) {
			                //double checking Singleton instance
			                if(INSTANCE == null) {
			                    INSTANCE = new DoubleCheckedLockingSingleton();
			                }
			            }
			         }
			         return INSTANCE;
			     }
			}
			
		2. By using 'static Singleton instance' initialized during class loading
			/**
			* Singleton pattern example with static factory method
			*/
			public class Singleton{
			    // Initialized during class loading
			    private static final Singleton INSTANCE = new Singleton();
			 
			    // To prevent creating another instance of Singleton
			    private Singleton(){}
			
			    public static Singleton getSingleton(){
			        return INSTANCE;
			    }
			}

		3. By using 'Java enum' to create thread-safe singleton is most simple way
			/**
			* Singleton pattern example using Java Enum
			*/
			public enum SingletonEnum {
			    INSTANCE;
			}
			
			How to use?
			---------------
			public enum SingletonEnum {
			    INSTANCE;
			    
			    int value;
			    
			    public int getValue() {
			        return value;
			    }
			    
			    public void setValue(int value) {
			        this.value = value;
			    }
			}
			
			Main class:
			---------------
			public class EnumDemo {
			    public static void main(String[] args) {
			        SingletonEnum singleton = SingletonEnum.INSTANCE;
			        System.out.println(singleton.getValue());
			        singleton.setValue(2);
			        System.out.println(singleton.getValue());
			    }
			}

Why can’t we use a static class instead of singleton?
    - If your requirement needs to maintain state than Singleton pattern is better choice than static class, 
      because maintaining state in later case is nightmare and leads to subtle bugs

    - Singleton class is a class where only 'single instance' can exists per class-loader
      Static class has 'no instance'. Only fields and methods can be directly accessed as constants or helper methods
    - We can implement interface with Singleton class 
      But not with Static class
    - Can override methods defined in Singleton class by extending it
      Static methods in Java 'cannot be overridden', they leads to inflexibility
    - Singleton classes can be 'lazy loaded' if its an heavy object
      Static class are always 'eagerly loaded'
    - Singleton object are stored in 'Heap'
      Static object is stored in 'stack'
    - Can clone the object of Singleton
      Static class object cannot be cloned
    - Singleton class follow the OOP(object oriented principles) 
      Static class does not
    
    - Static class provides 'better performance' than Singleton pattern, because static methods are bonded on compile time
    - Static classes are hard to mock and consequently hard to test than Singletons
      It’s easier to write JUnit test for Singleton than static classes,
      because you can pass mock object whenever Singleton is expected, e.g. into constructor or as method arguments

Can we create a clone of a singleton object?
	- Yes

How to prevent cloning of a singleton object?
	- Throw exception within the body of clone() method.

Name some of the design patterns which are used in JDK library.
    - Singleton pattern is used by Runtime, Calendar classes.
    - Decorator pattern is used by Wrapper classes. 
    - Iterator pattern is used by Collection classes.
    - Observer pattern is used by event handling frameworks like swing, awt.

When to use Adapter pattern in Java? Have you used it before in your project?
	- Use Adapter pattern when you need to make two class work with incompatible interfaces. 
	- Adapter pattern can also be used to encapsulate third party code, so that your application only depends upon Adapter, 
	  which can adapt itself when third party code changes or you moved to a different third party library.

What is Open closed design principle in Java?
	- Open closed design principles says that new functionality should be added by introducing new classes, 
	  methods or fields instead of modifying already tried and tested code. 
	- One of the way to achieve this is Inheritance where class is extended to introduce new functionality 
	  on top of inherited basic features.

Name some design pattern and give an example of recent use in the project?
	- Singleton pattern
	- Adapter pattern
	- Factory pattern
	- Abstract Factory pattern
	- Proxy pattern
	- MVC pattern
	
What is difference between abstract factory and factory method pattern?
    - Abstract Factory pattern delegates the responsibility of object instantiation to another object via composition 
    - Factory Method pattern uses inheritance and relies on a subclass to handle the desired object instantiation
